#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

const int MAXN = 3002;

struct node{
    double l, r, h;
    int f;
    node(){}
    node(double a, double b, double c, int d):l(a), r(b), h(c), f(d){}
    bool operator < (const node &o)const{
        return h < o.h;
    }
}seg[MAXN];

int cnt[MAXN<<2];
double sum1[MAXN<<2], sum2[MAXN<<2], x[MAXN];

void push_up(int o, int l, int r){
    if(cnt[o] >= 2) {
        sum1[o] = sum2[o] = x[r+1] - x[l];
    }else if(cnt[o] == 1){
        sum1[o] = x[r+1] - x[l];
        sum2[o] = sum1[o<<1] + sum1[o<<1|1];
    }else {
        sum1[o] = sum1[o<<1] + sum1[o<<1|1];
        sum2[o] = sum2[o<<1] + sum2[o<<1|1];
    }
}

void update(int ql, int qr, int c, int o, int l, int r){
    if(ql <= l && r <= qr){
        cnt[o] += c;
        push_up(o, l, r);
        return;
    }
    int m = (l+r)>>1;
    if(ql <= m) update(ql, qr, c, o<<1, l, m);
    if(qr > m) update(ql, qr, c, o<<1|1, m+1, r);
    push_up(o, l, r);
}

int main()
{
    int T, n, m;
    scanf("%d", &T);
    while(T--){
        n = 0;
        scanf("%d", &m);
        double x1, x2, y1, y2;
        while(m--){
            scanf("%lf%lf%lf%lf", &x1, &y1, &x2, &y2);
            x[++n] = x1;
            seg[n] = node(x1, x2, y1, 1);
            x[++n] = x2;
            seg[n] = node(x1, x2, y2, -1);
        }
        sort(x+1, x+n+1);
        sort(seg+1, seg+n+1);
        memset(sum1, 0, sizeof(sum1));
        memset(sum2, 0, sizeof(sum2));
        memset(cnt, 0, sizeof(cnt));
        int k = unique(x+1, x+n+1) - (x+1);
        double ans = 0;
        for(int i = 1; i < n; i++){
            int l = lower_bound(x+1, x+k+1, seg[i].l) - x;
            int r = lower_bound(x+1, x+1+k, seg[i].r) -x-1;
            if(l <= r) update(l, r, seg[i].f, 1, 1, k);
            //printf("%f\n", sum2[1]);
            ans += sum2[1]*(seg[i+1].h - seg[i].h);
        }
        printf("%.2f\n", ans);
    }
    return 0;
}
